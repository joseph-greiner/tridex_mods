########################################
# Basic Printer Macros
########################################

#####################################################################
#   Client Variable
#   - This overrides the park position in the mainsail.cfg PAUSE macro
#   !!! Required when using copy and mirror modes !!!
#   !!! Uncomment ONLY for Mainsail installation
#   for Fluidd, edit x_park and y_park in the pause macro in fluidd.cfg
#   to a position T0 can reach and not crash T1 while in copy or mirror mode.
#####################################################################

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True  ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 30    ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 30    ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True  ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
gcode:

######################################################################################################################################################
#  FULL FEATURED PRUSA SLICER START GCODE:
#  Leave the lines "; M190 S0" and "; M109 S0" in place, these have Prusa Slicer set the bed temperature and pass extruder temperatures to the gcode
#     This includes the following situations:
#     Only T0 used in a print
#     Only T1 used in a print
#     T0 AND T1 used in a print
#
######################################################################################################################################################
#  This is the recommended start gcode for Prusa Slicer to enable all features in the print_start macro:
#  ; M190 S0
#  ; M109 S0 ; uncomment to remove set&wait temp gcode added automatically after this start gcode
#  print_start print_mode="PRIMARY" t0_starting_temp={first_layer_temperature[0]} t1_starting_temp={first_layer_temperature[1]} ooze_prev={ooze_prevention} initial_tool={initial_extruder}
#
#  To have the ability to use different filaments when using COPY mode use the following in your start gcdode in Prusa Slicer: 
#  ; M190 S0
#  ; M109 S0 ; uncomment to remove set&wait temp gcode added automatically after this start gcode
#  print_start print_mode="COPY" t1_starting_temp={first_layer_temperature[1]} t0_printing_temp={temperature[0]} t1_printing_temp={temperature[1]}
#
#  To have the ability to use different filaments when using MIRROR mode use the following in your start gcdode in Prusa Slicer: 
#  ; M190 S0
#  ; M109 S0 ; uncomment to remove set&wait temp gcode added automatically after this start gcode
#  print_start print_mode="MIRROR" t1_starting_temp={first_layer_temperature[1]} t0_printing_temp={temperature[0]} t1_printing_temp={temperature[1]}
######################################################################################################################################################

######################################################################################################################################################
#  Print Start Routine
#  Feel free to edit how you choose, this is the framework that works with minimal slicer configuration
######################################################################################################################################################

[gcode_macro print_start]
gcode:
    # The slicer has already sent the commands to heat up the bed and extruders,
    # here we grab the extruder set temperatures to be used to figure out what we need to purge.
    {% set t0_start_temp = printer.extruder.target|int %}
    {% set t1_start_temp = printer.extruder1.target|int %}


    # Setup copy / mirror temperatures from parameters if present.
    {% set t0_first_layer = params.T0_STARTING_TEMP|default(0)|int %}
    {% set t0_start_temp_copy_mirror = t0_first_layer|int %}
    {% set t1_start_temp_copy_mirror = params.T1_STARTING_TEMP|default(0)|int %}
    {% set t0_print_temp_copy_mirror = params.T0_PRINTING_TEMP|default(0)|int %}
    {% set t1_print_temp_copy_mirror = params.T1_PRINTING_TEMP|default(0)|int %}
    
    # Assign parameters set from the slicer
    {% set print_mode = params.PRINT_MODE|upper|default("PRIMARY") %}
    {% set ooze_prev = params.OOZE_PREV|upper|default("FALSE") %}
    {% set initial_tool = params.INITIAL_TOOL|default(0)|int %}

    # Setup access for other printer variables
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set svv = printer.save_variables.variables %}

    #####################################################################
    #  !!! Input shaper for IDEX machines !!!
    #   Input shaper values are assigned in the print_start macro
    #   They are not saved under [input_shaper] in printer.cfg
    #####################################################################
    ##--------------------------------------------------------------------
    #SET_DUAL_CARRIAGE CARRIAGE=1
    #SET_INPUT_SHAPER SHAPER_TYPE_X=MZV SHAPER_FREQ_X=46.6
    #SET_INPUT_SHAPER SHAPER_TYPE_Y=MZV SHAPER_FREQ_Y=61.8
    #SET_DUAL_CARRIAGE CARRIAGE=0
    #SET_INPUT_SHAPER SHAPER_TYPE_X=MZV SHAPER_FREQ_X=46.6
    #SET_INPUT_SHAPER SHAPER_TYPE_Y=MZV SHAPER_FREQ_Y=46.4
    ##--------------------------------------------------------------------

    # If ooze prevention is used then we need to set the tool change method properly
    # otherwise the tool head will heat back up on top of our print.
    {% if ooze_prev == "TRUE" %}
      SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=swap_toolheads VALUE=0
      SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=immediate_move VALUE=0
    {% else %}
    # If ooze prevention is NOT used, lets make sure that the tool change method matches what the user wants.
    # Just in case the last print used ooze prevention.
      {% set tool_change = svv.preferred_tool_change|upper %}
      {% if tool_change == "SWAP" %}
        SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=swap_toolheads VALUE=1
        SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=immediate_move VALUE=1
      {% elif tool_change == "OOZE_PREV" %}
        SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=swap_toolheads VALUE=0
        SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=immediate_move VALUE=0
      {% else %}
        # Classic Tridex tool change catches all other entries.
        SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=swap_toolheads VALUE=0
        SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=immediate_move VALUE=1
      {% endif %}
    {% endif %}

    # Clear any copy or mirror modes from previous prints
    {% if printer.dual_carriage.carriage_1 == "COPY" or printer.dual_carriage.carriage_1 == "MIRROR" %}
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
        SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
        {% if printer.toolhead.homed_axes == "xyz" %}
            # Re-home X no matter what to reset the tool head positions
            G28 X
        {% endif %}
    {% endif %}

    # If the last print left T1 active re-home X to reset positions and active tool head
    {% if printer.dual_carriage.carriage_0 == "INACTIVE" %}
        {% if printer.toolhead.homed_axes == "xyz" %}
            G28 X
        {% endif %}
    {% endif %}

    # If Tap is installed, uncomment the next line, to head off T0 getting to temp and set it to 150
    # for klicky and inductive probes this is not required.
    ##--------------------------------------------------------------------
    #M109 S150 T0
    ##--------------------------------------------------------------------
    
    # Check to see if homing and z_tilt has been done
    CHOME

    # Set our print mode, perform additional pre-printing functions if required.
    {% if print_mode == "PRIMARY" %}
        M605 S1 # Set to primary with auto-park
        # Stealthburner LED Section ##
        #STATUS_MESHING               #
        # End LED Section ############
        # Run a bed mesh
        BED_MESH_CALIBRATE ADAPTIVE=1
    {% endif %}

    # Park T0, preparing for heat up
    _PARK_TOOL

    # If we are doing a copy / mirror modes then we set the variables for the temperatures.
    {% if (print_mode) == "COPY" or (print_mode) == "MIRROR" %}
        # Set T1 starting temperature from the parameter.
        {% set t1_start_temp = t1_start_temp_copy_mirror %}
        # Check and make sure compatable g-code has been loaded.
        {% if t0_start_temp <= 160 %}
            RESPOND TYPE=error MSG="*** ERROR *** ERROR *** ERROR ***"
            RESPOND TYPE=error MSG="T1 print file detected, COPY and MIRROR modes must be based on T0 gcode...."
            RESPOND TYPE=error MSG="*** ERROR *** ERROR *** ERROR ***"
            # Set the extruders start temps to 0
            {% set t0_start_temp = 0 %}
            {% set t1_start_temp = 0 %}
            # Shutdown the heaters
            M104 S0 T0
            M104 S0 T1
            M140 S0
            # Reset print_mode to primary
            {% set print_mode = "PRIMARY" %}
            # Shut off the motors
            M83
        {% else %}
            # Update the DCVARS macro values with the printing temperature values for both extruders.
            SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=t0_copy_mirror_temp_start VALUE={t0_start_temp_copy_mirror}
            SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=t1_copy_mirror_temp_start VALUE={t1_start_temp_copy_mirror}
            SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=t0_copy_mirror_temp_print VALUE={t0_print_temp_copy_mirror}
            SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=t1_copy_mirror_temp_print VALUE={t1_print_temp_copy_mirror}
            # Clear any saved bed mesh, then finish the printer config for the selected mode
            BED_MESH_CLEAR
        {% endif %}
    {% endif %}

    # Heat up the hot ends used in the print.
    # If T0 is used, begin the heat up.
    {% if t0_start_temp > 160 %}
        #STATUS_HEATING
        M104 S{t0_first_layer} T0
    {% endif %}
    # If T1 is used heat it up to printing temp.
    {% if t1_start_temp > 160 %}
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
        ACTIVATE_EXTRUDER EXTRUDER=extruder1
        #STATUS_HEATING
        M109 S{t1_start_temp_copy_mirror} T1
        #STATUS_READY
        SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
        ACTIVATE_EXTRUDER EXTRUDER=extruder
    {% endif %}
    # Insure T0 is fully heated to printing temp.
    {% if t0_start_temp > 160 %}
        M109 S{t0_first_layer} T0
        #STATUS_READY
    {% endif %}
    # Setup our print mode in preparation for purging.
    {% if (print_mode) == "COPY" %}
         # Call M605 to setup copy mode
        M605 S2
    {% elif (print_mode) == "MIRROR" %}
        # Call M605 to setup mirror mode.
        M605 S3
    {% endif %}

    # Grab any tweaked z_offset the user had previously set.
    # T0 will be active by this point so we do not have to mess with subtracting T1 z_offset.
    {% set tweaked_z_offset = printer.gcode_move.homing_origin.z|float|round(3) %}
    
    # Call the purge macro.
    # If T0 is used in the print.
    {% if t0_start_temp > 160 %}
        # If we are using copy or mirror modes.
        {% if (print_mode == "COPY") or (print_mode =="MIRROR") %}
            PURGE_TOOL T=0
        {% endif %}
        # If T1 is not used.
        {% if t1_start_temp < 160 %}
            #STATUS_PRINTING
            PURGE_TOOL T=0
        {% endif %}
        # IF T0 and T1 are used in the print
        {% if (t1_start_temp > 160) and (print_mode == "PRIMARY") %}
            # If the z offset is 0 - most likely set via hardware. Purge both of the extruders at the same tine.
            {% if dcvars.offset_z == 0.000|round(3)|float %}
                # Stealthburner LED Section ##########################
                #SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
                #ACTIVATE_EXTRUDER EXTRUDER=extruder1
                #STATUS_PRINTING
                #SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
                #ACTIVATE_EXTRUDER EXTRUDER=extruder0
                #STATUS_PRINTING
                # End LED Section ####################################
                # Setup dual purging.
                SET_DUAL_CARRIAGE CARRIAGE=1 MODE=MIRROR
                SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
                # Purge the tools.
                PURGE_TOOL T=0
                # Reset to primary mode.
                SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
                SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
                # Activate initial extruder, park the other one.
                {% if initial_tool == 0 %}
                    # Make sure T1 is parked.
                    SET_DUAL_CARRIAGE CARRIAGE=1
                    ACTIVATE_EXTRUDER EXTRUDER=extruder1
                    #STATUS_READY
                    _PARK_TOOL
                    # Activate T0.
                    SET_DUAL_CARRIAGE CARRIAGE=0
                    ACTIVATE_EXTRUDER EXTRUDER=extruder
                    SET_GCODE_OFFSET X=0 Y=0 Z={tweaked_z_offset} MOVE=1
                {% else %}
                    # Make sure T0 is parked.
                    SET_DUAL_CARRIAGE CARRIAGE=0
                    ACTIVATE_EXTRUDER EXTRUDER=extruder
                    #STATUS_READY
                    _PARK_TOOL
                    # Activate T1.
                    SET_DUAL_CARRIAGE CARRIAGE=1
                    ACTIVATE_EXTRUDER EXTRUDER=extruder1
                    SET_GCODE_OFFSET X={dcvars.offset_x} Y={dcvars.offset_y} Z={tweaked_z_offset|float + dcvars.offset_z|float|round(3)} MOVE=1
                {% endif %}
            {% else %}
                # Software z offset is set, purge the nozzles one at a time so first printing is last purged.
                {% if initial_tool == 0 %}
                    # Activate T1 and set the offsets.
                    SET_DUAL_CARRIAGE CARRIAGE=1
                    ACTIVATE_EXTRUDER EXTRUDER=extruder1
                    SET_GCODE_OFFSET X={dcvars.offset_x} Y={dcvars.offset_y} Z={tweaked_z_offset|float + dcvars.offset_z|round(3)} MOVE=1
                    #STATUS_PRINTING
                    # Purge T1, scrub the nozzle and park.
                    PURGE_TOOL T=1
                    _NOZZLE_SCRUB
                    #STATUS_READY
                    _PARK_TOOL
                    # Activate T0 and re-set the offsets.
                    SET_DUAL_CARRIAGE CARRIAGE=0
                    ACTIVATE_EXTRUDER EXTRUDER=extruder
                    SET_GCODE_OFFSET X=0 Y=0 Z={tweaked_z_offset|float|round(3)} MOVE=1
                    #STATUS_PRINTING
                    # Purge T0 and start printing.
                    PURGE_TOOL T=0
                {% else %}
                    # Activate T0 and re-set the offsets.
                    SET_DUAL_CARRIAGE CARRIAGE=0
                    ACTIVATE_EXTRUDER EXTRUDER=extruder
                    SET_GCODE_OFFSET X=0 Y=0 Z={tweaked_z_offset|float|round(3)} MOVE=1
                    # Purge T0, scrub the nozzle and park.
                    #STATUS_PRINTING
                    PURGE_TOOL T=0
                    _NOZZLE_SCRUB
                    #STATUS_READY
                    _PARK_TOOL
                    # Activate T1 and set the offsets.
                    SET_DUAL_CARRIAGE CARRIAGE=1
                    ACTIVATE_EXTRUDER EXTRUDER=extruder1
                    SET_GCODE_OFFSET X={dcvars.offset_x} Y={dcvars.offset_y} Z={tweaked_z_offset|float + dcvars.offset_z|float|round(3)} MOVE=1
                    #STATUS_PRINTING
                    # Purge T1 tool and start printing.
                    PURGE_TOOL T=1
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}
    # If T0 is not used and T1 is used.
    {% if (t0_start_temp < 160) and (t1_start_temp > 160) %}
        SET_DUAL_CARRIAGE CARRIAGE=1
        ACTIVATE_EXTRUDER EXTRUDER=extruder1
        SET_GCODE_OFFSET X={dcvars.offset_x} Y={dcvars.offset_y} Z={tweaked_z_offset|float + dcvars.offset_z|float|round(3)} MOVE=1
        #STATUS_PRINTING
        PURGE_TOOL T=1
        M104 S0 T0
    {% endif %}

    # Reset temps if using ooze prevention.
    {% if ooze_prev =="TRUE" %}
        M104 S{t0_start_temp} T0
        M104 S{t1_start_temp} T1
        # Prusa Slicer is going to put an M109 in after print_start, park the active tool head so we don't get oozing.
        _PARK_TOOL
    {% endif %}

#####################################################################
#  Purge Macro: edit to your preferences
#####################################################################

##--------------------------------------------------------------------
[gcode_macro PURGE_TOOL]
gcode:
    {% set head = params.T|default(0)|int %}
    {% set t1_prime_start = printer.configfile.config.stepper_x.position_min|float + printer.configfile.config.dual_carriage.position_max|float - 5 %}
    # The tool head to be purged is expected to be active and at temperature
    G90                             ; use absolute coordinates.
    G92 E0                          ; reset extrusion length.
    G1 Y3 Z0.2 F12000               ; move to Y3 to start purge lines.
    {% if head == 0 %}
        G1 X5 F12000
        G1 X65 E10 F1000
        G1 Y1
        G1 X5 E10 F1000
    {% else %}
        G1 X{t1_prime_start} F12000
        G1 X{t1_prime_start - 60} E10 F1000
        G1 Y1
        G1 X{t1_prime_start} E10 F1000
    {% endif %}
    G1 Z5                           ; Raise the Z height.
    G92 E0                          ; reset extrusion length.
##--------------------------------------------------------------------

#####################################################################
#  Print End
#####################################################################

[gcode_macro print_end]
#   Use PRINT_END for the slicer ending script.
gcode:
    {% set y_park = printer.configfile.config.stepper_y.position_max|float - 25 %}
    {% set z_safe = printer.configfile.config.stepper_z.position_max|int - printer.gcode_move.position.z|int %}
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G0 E-5.0 F3600                 ; retract 5mm
    G0 Y{y_park} F12000            ; park gantry at rear
    _PARK_TOOL                     ; park active tool head
    M104 S0 T0                     ; turn off T0 hotend
    M104 S0 T1                     ; turn off T1 hotend
    M140 S0                        ; turn off bed
    M106 S0 P0                     ; turn off T0 part fan
    M106 S0 P1                     ; turn off T1 part fan
    {% if (z_safe) > 10 %}         ; Check to see if it is safe to move the bed down 10mm
      G91                          ; Relative positioning
      G0 Z10 F3000                 ; Move bed if it is safe to do so
      G90                          ; Absolute positioning
    {% endif %}

#####################################################################
#  Conditional Homing Routine, home the printer if not already 
#####################################################################

[gcode_macro CHOME]
description: Homes XYZ axis only if printer is in a non-homed state
gcode:
    # Home the printer
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    # Adjust the z_tilt if not done
    {% if printer['z_tilt'].applied == False %}
        # Stealthburner LED Section ##
        #STATUS_LEVELING             #
        # End LED Section ############
        Z_TILT_ADJUST
        # Re-home Z  to verify it is correct
        G28 Z
    {% endif %}

#####################################################################
#  IDEX Home Y Routine
#####################################################################

[gcode_macro IDEX_HOME_Y]
gcode:
    # Stealthburner LED Section ##
    #STATUS_HOMING                #
    #SET_DUAL_CARRIAGE CARRIAGE=1 #
    #STATUS_HOMING                #
    #SET_DUAL_CARRIAGE CARRIAGE=0 #
    # End LED Section ############

    G28 Y0
    G91 ; Relative positioning
    G0 Y-25 F2400 ; Move away from the back by 25mm
    G90 ; Return to absolute positioning

    # Stealthburner LED Section ##
    #STATUS_HOMING                #
    #SET_DUAL_CARRIAGE CARRIAGE=1 #
    #STATUS_HOMING                #
    #SET_DUAL_CARRIAGE CARRIAGE=0 #
    # End LED Section ############

#####################################################################
#  IDEX Home X Routine
#####################################################################

[gcode_macro IDEX_HOME_X]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set prev_z_offset = printer.gcode_move.homing_origin.z|round(3)|float %}
    {% set bed_center = (printer.configfile.config.stepper_x.position_min + printer.configfile.config.dual_carriage.position_max)|float / 2|float %}

    {% if printer.toolhead.extruder == "extruder1" %}
      SET_DUAL_CARRIAGE CARRIAGE=0
      ACTIVATE_EXTRUDER EXTRUDER=extruder
      {% set prev_z_offset = (prev_z_offset - dcvars.offset_z)|round(3) %}
    {% endif %}

    # Stealthburner LED Section ##
    #STATUS_HOMING                #
    #SET_DUAL_CARRIAGE CARRIAGE=1 #
    #STATUS_HOMING                #
    #SET_DUAL_CARRIAGE CARRIAGE=0 #
    # End LED Section ############

    G28 X0
    SET_DUAL_CARRIAGE CARRIAGE=1
    ACTIVATE_EXTRUDER EXTRUDER=extruder1

    # Stealthburner LED Section ##
    #STATUS_READY                 #
    #SET_DUAL_CARRIAGE CARRIAGE=0 #
    #STATUS_READY                 #
    #SET_DUAL_CARRIAGE CARRIAGE=1 #
    # End LED Section ############

    T0 # Switch to T0

    SET_GCODE_OFFSET X=0 Y=0 Z={prev_z_offset} MOVE=1 #set the previous z_offset

#####################################################################
#  Printer Sleep - Shuts downs motors, fans and lights
#####################################################################

[gcode_macro printer_sleep]
gcode:
    #SET_DUAL_CARRIAGE CARRIAGE=1                                  # Select tool head 1
    #SET_LOGO_LEDS_OFF                                             # Shut off Stealthburner logo LED
    #SET_NOZZLE_LEDS_OFF                                           # Shut off nozzle LEDs
    #SET_DUAL_CARRIAGE CARRIAGE=0                                  # Select tool head 0
    #SET_LOGO_LEDS_OFF                                             # Shut off Stealthburner logo LED
    #SET_NOZZLE_LEDS_OFF                                           # Shut off nozzle LEDs
    #SET_LED LED=chamber_lighting WHITE=0.00 SYNC=0 TRANSMIT=1     # Shut off chamber LEDs
    #SET_LED LED=bed_logo RED=0.0 BLUE=0.0 GREEN=0.0 WHITE=0.0 TRANSMIT=1
    M84                                                           # Turn off motors
    M107                                                          # Turn off fans

#####################################################################
#  M601 - add support for Prusa Slicer pause at layer
#####################################################################

[gcode_macro M601]
gcode:
    RESPOND TYPE=echo MSG="Do the thing you paused the print for."
    PAUSE