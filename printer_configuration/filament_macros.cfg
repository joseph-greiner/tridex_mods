#####################################################################
#   Filament Runout Sensor Definitions.
#   NOTE: Filament sensors are not required to use these macros,
#         they only allow automation of loading and runout detection.
#####################################################################

[filament_switch_sensor T0_Filament_Runout_Sensor]
pause_on_runout: False
runout_gcode: ROLLOVER_FILAMENT T=0
insert_gcode: AUTO_LOAD_FILAMENT T=0
switch_pin: !PG10

[filament_switch_sensor T1_Filament_Runout_Sensor]
pause_on_runout: False
runout_gcode: ROLLOVER_FILAMENT T=1
insert_gcode: AUTO_LOAD_FILAMENT T=1
switch_pin: !PG14

[gcode_macro FILAMENT_VARS]

#####################################################################
#  Filament loading variables - these are used when auto-loading filament is enabled. 
#  When filament is put into the runout switch, the printer will try to heat the appropriate hot end and purge the set amount of filament.
#  Adjust these variables to your machine.
#####################################################################

variable_auto_load_filament: 1                       # Automatically load filament, 1 = enable, 0 = disable.
variable_default_filament_temp: 250                  # Default filament extrusion temperature, only used if the hot end is not pre-heated for filament load.
variable_filament_load_delay: 10000                  # Length of time in milliseconds to pause between filament switch activation and time the extruder starts to try and feed filament.
                                                     # 10000 has been a comfortable time for me. If the nozzle is not pre-heated, this delay is ignored because of the heat up time.
                                                     # This time is number of seconds x 1000. ie for 15 seconds use 15000.
variable_default_filament_load_length: 100           # Length of filament to extrude when loading. Must be less than or equal to max_extrude_distance under extruder configuration.
                                                     # 100 seems to work well with G2SA and Revo nozzles.

#####################################################################
#  Filament rollover variables - used to automatically swap tool heads during a print if the printing extruder runs out of filament.
#  Only for single extruder printing.
#  Assumes the same filament type loaded into both tool heads.
#####################################################################

variable_filament_rollover: 1                        # Automatically rollover filament, 1 = enable, 0 = disable.
variable_filament_rollover_purge: 15                 # Length of filament to purge when rolling over.
variable_filament_rollover_distance: 25              # Distance from parking area to purge the idle extruder. 25 is eniugh to move the tool head off of the wiper arms.
variable_filament_rollover_wait_distance: 450        # Length of filament to extrude AFTER the runout switch has been triggered.
                                                     # Make slightly less than the distance from your runout switch to your tool head.
variable_filament_rollover_check_timer: 5            # Time in seconds to check on the length of extruded filament since the switch was triggered.

variable_rollover_on_change_at_layer: 0              # Behavior for M600. 0 pauses print, prompts user to unload and load filament before resuming print.
                                                     #                    1 heats up other tool head and changes to it (essentially rolls over to the other tool head).

#####################################################################
#  Variable to store information for use between macros.
#####################################################################

variable_filament_rollover_extruder_initial_distance: 0
variable_filamet_rollover_switch_id: 0

gcode:

#####################################################################
#  Load filament - load filament into the active tool head
#####################################################################

[gcode_macro load_filament]
gcode:
    {% set flvars = printer["gcode_macro FILAMENT_VARS"] %}
    # Find the active tool head.
    {% if printer.dual_carriage.carriage_1 == "INACTIVE" %}
        {% if printer.extruder.can_extrude == true %}
            G1 E{flvars.default_filament_load_length|int} F300
        {% else %}
            RESPOND TYPE=echo MSG="Preheat extruder to load filament."
        {% endif %}
    {% else %}
        {% if printer.extruder1.can_extrude == true %}
            G1 E{flvars.default_filament_load_length|int} F300
        {% else %}
            RESPOND TYPE=echo MSG="Preheat extruder1 to load filament."
        {% endif %}
    {% endif %}

#####################################################################
#  Unload filament - unload filament from the active tool head
#####################################################################

[gcode_macro unload_filament]
gcode:
    {% set flvars = printer["gcode_macro FILAMENT_VARS"] %}
    # Find the active tool head.
    {% if printer.dual_carriage.carriage_1 == "INACTIVE" %}
        {% if printer.extruder.can_extrude == true %}
            G1 E-{flvars.default_filament_load_length|int} F300
        {% else %}
            RESPOND TYPE=echo MSG="Preheat extruder to unload filament."
        {% endif %}
    {% else %}
        {% if printer.extruder1.can_extrude == true %}
            G1 E-{flvars.default_filament_load_length|int} F300
        {% else %}
            RESPOND TYPE=echo MSG="Preheat extruder1 to unload filament."
        {% endif %}
    {% endif %}

#####################################################################
#  Purge more - purges more filament from the active tool head.
#         The purge amount is default_filament_load_length / 4.
#####################################################################

[gcode_macro purge_more]
gcode:
    {% set purge_amount = (printer["gcode_macro FILAMENT_VARS"].default_filament_load_length|int / 4) %}
    # Find the active tool head.
    {% if printer.dual_carriage.carriage_1 == "INACTIVE" %}
        {% if printer.extruder.can_extrude == true %}
            G1 E{purge_amount} F300
        {% else %}
            RESPOND TYPE=echo MSG="Preheat extruder to purge filament."
        {% endif %}
    {% else %}
        {% if printer.extruder1.can_extrude == true %}
            G1 E{purge_amount} F300
        {% else %}
            RESPOND TYPE=echo MSG="Preheat extruder1 to purge filament."
        {% endif %}
    {% endif %}

#####################################################################
#  M600 - Support filament change on layer
#  NOTE: Activate with "M600 CHANGE=1" to manually rollover filament.
#####################################################################

[gcode_macro M600]
gcode:
    {% set flvars = printer["gcode_macro FILAMENT_VARS"] %}
    {% set manual_change = params.CHANGE|default(0)|int %}
    {% if manual_change == 0 %}
        {% set manual_change = flvars.rollover_on_change_at_layer|int %}
    {% endif %}
    # Make sure we are printing.
    {% if printer.idle_timeout.state == "Printing" %}
        {% if manual_change == 0 %}
            PAUSE
            RESPOND TYPE=command MSG="action:prompt_begin M600 Triggered"
            RESPOND TYPE=command MSG="action:prompt_text Unload your filament and load the new filament."
            RESPOND TYPE=command MSG="action:prompt_footer_button UNLOAD|UNLOAD_FILAMENT|primary"
            RESPOND TYPE=command MSG="action:prompt_footer_button LOAD|LOAD_FILAMENT|primary"
            RESPOND TYPE=command MSG="action:prompt_footer_button PURGE MORE|PURGE_MORE|primary"
            RESPOND TYPE=command MSG="action:prompt_footer_button RESUME|_RESUME_PRINT|secondary"
            RESPOND TYPE=command MSG="action:prompt_show"
        {% else %}
            # Setup the variable needed for the rollover macro.
            {% if printer.dual_carriage.carriage_1 == "INACTIVE" %}
                SET_GCODE_VARIABLE MACRO=FILAMENT_VARS VARIABLE=filamet_rollover_switch_id VALUE=0
            {% else %}
                SET_GCODE_VARIABLE MACRO=FILAMENT_VARS VARIABLE=filamet_rollover_switch_id VALUE=1
            {% endif  %}
            # Call the rollover macro because I already coded this.
            COMPLETE_ROLLOVER
        {% endif %}
    {% else %}
        RESPOND TYPE=echo MSG="M660 needs to be called while printing"
    {% endif %}

#####################################################################
#  _RESUME_PRINT - resume the print and close the prompt from M600
#####################################################################

[gcode_macro _resume_print]
gcode:
    RESPOND TYPE=command MSG="action:prompt_end"
    RESPOND TYPE=echo MSG="RESUME macro called"

#####################################################################
#  Auto-Load Filament - Triggered by the filament switch
#####################################################################

[gcode_macro auto_load_filament]
gcode:
    {% set flvars = printer["gcode_macro FILAMENT_VARS"] %}
    {% set tool_head = params.T|int %}
    # Check to see if auto loading filament is enabled.
    {% if flvars.auto_load_filament == 1 %}
      # Check to make sure we are not printing.
      {% if printer.idle_timeout.state != "Printing" %}
          # Store the currently active tool head.
          {% if printer.dual_carriage.carriage_0 == "INACTIVE" %}
              {% set active_head = 1 %}
          {% else %}
              {% set active_head = 0 %}
          {% endif %}
          RESPOND TYPE=echo MSG="Loading filament for tool head T"{tool_head}
          # Set the active tool head.
          SAVE_GCODE_STATE NAME=loading_filament
          SET_DUAL_CARRIAGE CARRIAGE={tool_head}
          {% if tool_head == 0 %}
              ACTIVATE_EXTRUDER EXTRUDER=extruder
              RESPOND TYPE=echo MSG="Extruder Active"
              # If we are below minimum extruder temp.
              {% if printer.extruder.can_extrude == false %}
                  # Heat up to pre-set value.
                  RESPOND TYPE=echo MSG="Heating up tool head T"{tool_head}
                  RESPOND TYPE=echo MSG="Push filament to extruder..."
                  M109 S{flvars.default_filament_temp} T0
              {% else %}
                  # Wait 10 seconds for user to run filament to the extruder.
                  RESPOND TYPE=echo MSG="Push filament to extruder..."
                  G4 P{flvars.filament_load_delay}
              {% endif %}
          {% else %}
              ACTIVATE_EXTRUDER EXTRUDER=extruder1
              RESPOND TYPE=echo MSG="Extruder1 Active"
              # If we are below minimum extruder temp.
              {% if printer.extruder1.can_extrude == false %}
                  # Heat up to pre-set value.
                  RESPOND TYPE=echo MSG="Heating up tool head T"{tool_head}
                  RESPOND TYPE=echo MSG="Push filament to extruder..."
                  M109 S{flvars.default_filament_temp} T1
              {% else %}
                  # Wait 10 seconds for user to run filament to the extruder.
                  RESPOND TYPE=echo MSG="Push filament to extruder..."
                  G4 P{flvars.filament_load_delay}
              {% endif %}
          {% endif %}
          # Extrude the filament.
          RESPOND TYPE=echo MSG="Loading filament now..."
          M83
          G92 E0
          G1 E{flvars.default_filament_load_length} F150
          G92 E0
          # Go back to the previous active tool head.
          SET_DUAL_CARRIAGE CARRIAGE={tool_head}
          {% if tool_head == 0 %}
              ACTIVATE_EXTRUDER EXTRUDER=extruder
          {% else %}
              ACTIVATE_EXTRUDER EXTRUDER=extruder1
          {% endif %}
          RESTORE_GCODE_STATE NAME=loading_filament
      {% endif %}
    {% endif %}

#####################################################################
#  Rollover Filament Macro
#####################################################################

[gcode_macro rollover_filament]
gcode:
    {% set flvars = printer["gcode_macro FILAMENT_VARS"] %}
    {% set filament_sensor = params.T|int %}
    # Check to see if rollover is enabled.
    {% if flvars.filament_rollover == 1 %}
        # Make sure we are not in a copy / mirror mode print.
        {% if printer.dual_carriage.carriage_0 == "PRIMARY" or printer.dual_carriage.carriage_1 == "PRIMARY" %}
            # Check to see if we are printing.
            {% if printer.idle_timeout.state == "Printing" %}
                # Notify the user that the printing extruder is running out of filament.
                RESPOND TYPE=echo MSG="Filament runout detected for tool head "{filament_sensor}
                # Set the calling switch ID.
                SET_GCODE_VARIABLE MACRO=FILAMENT_VARS VARIABLE=filamet_rollover_switch_id VALUE={filament_sensor}
                # Call the macro to setup rollover variables.
                INITIALIZE_ROLLOVER
            {% endif %}
        {% else %}
            # Let the user know that the current print mode is not supported.
            RESPOND TYPE=echo MSG="Rollover is only valid for PRIMARY printing mode, COPY / MIRROR modes are not supported."
            # Call the pause macro.
            PAUSE
        {% endif %}
    {% else %}
        # Call the pause macro.
        PAUSE
    {% endif %}

#####################################################################
#  Initialize rollover - set the variables we need so we can track
#      filament usage until the change point.
#####################################################################

[gcode_macro initialize_rollover]
gcode:
    {% set flvars = printer["gcode_macro FILAMENT_VARS"] %}
    {% set extruder_position = printer.toolhead.position.e|int %}
    # Update the initial variable value.
    SET_GCODE_VARIABLE MACRO=FILAMENT_VARS VARIABLE=filament_rollover_extruder_initial_distance VALUE={extruder_position}
    # Set the other tool head to heat up to the same temp as the active tool head.
    {% if flvars.filamet_rollover_switch_id|int == 0 %}
        M104 S{printer.extruder.target|int} T1
    {% else %}
        M104 S{printer.extruder1.target|int} T0
    {% endif %}
    UPDATE_DELAYED_GCODE ID=measure_rollover_distance DURATION={flvars.filament_rollover_check_timer|int}

#####################################################################
#  Measure rollover distance - Measures the filament extruded since
#      the filament switch was triggered.
#####################################################################

[delayed_gcode measure_rollover_distance]
initial_duration: 0
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set flvars = printer["gcode_macro FILAMENT_VARS"] %}
    {% set extruder_position = printer.toolhead.position.e|int %}
    # Make sure that the extruder initial distance has been set properly.
    {% if flvars.filament_rollover_extruder_initial_distance|int != 0 %}
        {% set current_position = (extruder_position|int - flvars.filament_rollover_extruder_initial_distance|int) %}
        # If we have reached the filament wait distance.
        {% if current_position > flvars.filament_rollover_wait_distance|int %}
            # Set this macro to stop trifggering.
            UPDATE_DELAYED_GCODE ID=measure_rollover_distance DURATION=0
            # Call the last macro in this chain to finish rolling over the filament.
            COMPLETE_ROLLOVER
        {% else %}
            RESPOND TYPE=echo MSG="Position at filament trigger: "{dcvars.filament_rollover_extruder_initial_distance}
            RESPOND TYPE=echo MSG="Current extruder Position: "{extruder_position}
            {% set dist_to_go = (flvars.filament_rollover_wait_distance|int - (extruder_position|int - flvars.filament_rollover_extruder_initial_distance|int)) %}
            RESPOND TYPE=echo MSG="Filament left to be extruded: "{dist_to_go}
            UPDATE_DELAYED_GCODE ID=measure_rollover_distance DURATION={flvars.filament_rollover_check_timer|int}
        {% endif %}
    {% endif %}

#####################################################################
#  Complete rollover - Change to the other tool head and continue printing.
#####################################################################

[gcode_macro complete_rollover]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set flvars = printer["gcode_macro FILAMENT_VARS"] %}
    # Reset the initial value to 0.
    SET_GCODE_VARIABLE MACRO=FILAMENT_VARS VARIABLE=filament_rollover_extruder_initial_distance VALUE=0
    # Save the current tool change method.
    {% set user_set_tool_change_swap = dcvars.swap_toolheads|int %}
    {% set user_set_tool_change_move = dcvars.immediate_move|int %}
    {% set move_distance = flvars.filament_rollover_distance|int %}
    # Set immediate move to 0 and swap mode to 0.
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=swap_toolheads VALUE=0
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=immediate_move VALUE=0
    # Check to see which filament sensor sent the command.
    {% if flvars.filamet_rollover_switch_id == 0 %}
        # Reverse the movement direction, we will call T1.
        {% set move_distance = move_distance * -1 %}
        {% set active_temp = printer.extruder.target|int %}
        # Call the tool head change.
        T1
        # Make sure we reached temp with the new tool head, cool off the unused tool head.
        M104 S0 T0
        M109 S{active_temp} T1
    {% else %}
        {% set active_temp = printer.extruder1.target|int %}
        # Call the tool head change.
        T0
        # Make sure we reached temp with the new tool head, cool off the unused tool head.
        M104 S0 T1
        M109 S{active_temp} T0
    {% endif %}
    # Move active tool head off parking area.
    G91
    G1 X{move_distance} F{dcvars.feedrate}
    G90
    # Purge some filament.
    M83
    G92 E0
    G1 E{flvars.filament_rollover_purge} F300
    G1 Y1 F{dcvars.feedrate}
    G92 E0
    # scrub the nozzle once purge is done.
    _NOZZLE_SCRUB
    # Restore tool change method.
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=swap_toolheads VALUE={user_set_tool_change_swap}
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=immediate_move VALUE={user_set_tool_change_move}
