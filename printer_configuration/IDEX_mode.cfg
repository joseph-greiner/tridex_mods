# This file contains the configuration for independent dual extruder
# printer using dual carriages (an "IDEX" printer).

# See docs/Config_Reference.md for a description of parameters.

########################################
# DUAL-CARRIAGES Macros and variables
########################################

[save_variables]
filename: ~/printer_data/config/idex-variables.cfg

[gcode_macro DC_VARS]
# Variables for safe homing, set to z_endstop location pin OR safe location when using TAP
variable_homing_safe_x: 150
variable_homing_safe_y: 150
variable_homing_feedrate: 12000

# Distance from end of axis to park the tool head, needed for x/y offsets, default: 3
variable_park_distance: 3

# Copy and mirror mode start location for T0, T1 start will be calculated off these values
# This position is where to start the syncronization between the tool heads.
# I recommend placing it near the ending location for your T0 purge.
variable_copy_start_x: 5
variable_copy_start_y: 5
variable_copy_start_z: 5

# Print cooling fans names
variable_fan0: 'print_cooling_t0'
variable_fan1: 'print_cooling_t1'

## Autopark parameters
## default autopark: 0:inactive - 1:active
variable_autopark: 1
variable_z_hop: 1
variable_movespeed: 250
variable_feedrate: 20000

# Nozzle Scrub / Purge
variable_scrub: 1
variable_scrubs: 5
variable_prep_spd_xy: 3000
variable_purge_length: 0
variable_purge_spd: 150
variable_purge_ret: 0
variable_ooze_dwell: 1
variable_purge_temp_min: 200

#####################################################################
#  Filament rollover
#  Only for single extruder printing. If the filament runs out on
#  the printing extruder and the other extruder has filament
#  loaded then it will automatically heat up the idle extruder, purge,
#  then continue the print. Assumes the same filament type loaded.
#####################################################################

# Wether or not to use rollover feature 1 = enable, 0 = disable.
variable_filament_rollover: 1
# Length of filament to purge when rolling over
variable_filament_rollover_purge: 15
# Distance from parking area to purge the idle extruder.
variable_filament_rollover_distance: 25
# Automatically load filament, 1 = enable, 0 = disable
variable_auto_load_filament: 1
# Default filament extrusion temperature, only used if the hot end is not pre-heated for filament load.
variable_default_filament_temp: 250
# Length of time in milliseconds to pause between filament switch activation and time the extruder starts to try and feed filament
# 10000 has been a comfortable time for me. If the nozzle is not pre-heated, this delay is ignored because of the heat up time.
variable_filament_load_delay: 10000
# Length of filament to extrude when loading. Must be less than or equal to max_extrude_distance under extruder configuration.
# 100 works well with G2SA and Revo nozzles.
variable_default_filament_extrusion_length: 100

#####################################################################
#   Variables below here are set in idex-variables.cfg
#   Don't bother changing these, they will be overridden
#####################################################################

# How tool changes should be done, valid values are:
# SWAP Moves both tool heads at the same time, quickest tool change option.
#      Works best with the following custom g-code added to Tool Change:
#      {if wipe_tower}
#      G0 X{wipe_tower_x} Y{wipe_tower_y} F{travel_speed*60} ;move to wipe tower before toolchange
#      {endif}
# CLASSIC Moves tool heads individually, classic Tridex behavior. This is the default value
# OOZE_PREV During tool change, leaves the tool over the parking area while the nozzle re-heats.

# Set the preferred_tool_change in the idex-variables.cfg to one of the following values:
# preferred_tool_change = 'SWAP'
# preferred_tool_change = 'CLASSIC'
# preferred_tool_change = 'OOZE_PREV'

# Variables to store the tool head offsets, leave a 0.0
# Set your offsets in idex-variables.cfg
variable_offset_x: 0.0
variable_offset_y: 0.0
variable_offset_z: 0.0
# These variables are for the tool change method, do not edit
# Set your preferred tool change in idex-variables.cfg
variable_swap_toolheads: 0
variable_immediate_move: 1
# Copy and mirrror mode T1 temperatures - do not edit, these are sent over by the slicer.
variable_t0_copy_mirror_temp_start: 0
variable_t1_copy_mirror_temp_start: 0
variable_t0_copy_mirror_temp_print: 0
variable_t1_copy_mirror_temp_print: 0

gcode:

[respond]

#####################################################################
#   T0 macro
#   In PRIMARY mode activates tool 0, parks tool 1 if enabled
#####################################################################

[gcode_macro T0]
description: Activate T0 in "FULL_CONTROL" or "AUTO-PARK"
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set tweaked_z_offset = printer.gcode_move.homing_origin.z|round(3)|float %}
    {% set do_scrub = dcvars.scrub|int %}
    {% if printer.dual_carriage is defined %}
        {% if printer.dual_carriage.carriage_0 == "INACTIVE" %}
            # If the printer isn't homed, just change over to the other tool head.
            # This makes loading filament and puging a little easier
            {% if "xyz" not in printer.toolhead.homed_axes %}
                ACTIVATE_EXTRUDER EXTRUDER=extruder
                SET_DUAL_CARRIAGE CARRIAGE=0
            {% else %}
                # z-hop
                {% if dcvars.z_hop|float > 0.0 %}
                    {% set max_z = printer.toolhead.axis_maximum.z|float %}
                    {% set cur_z = printer.toolhead.position.z|float %}
                    {% set z_safe = dcvars.z_hop|float if cur_z < (max_z - dcvars.z_hop|float) else (max_z - cur_z) %}
                    G91
                    G1 Z{z_safe}
                    G90
                {% endif %}
                {% if dcvars.swap_toolheads == 1 %}
                    SAVE_GCODE_STATE NAME=swap_state
                    RESPOND TYPE=echo MSG="Swap Change"
                    _SWAP_T0
                    RESTORE_GCODE_STATE NAME=swap_state
                {% else %}
                    RESPOND TYPE=echo MSG="Classic Change"
                    {% if dcvars.autopark == 1 %}
                        # park tool
                        SAVE_GCODE_STATE NAME=toolhead_state
                        _PARK_TOOL
                        # Stealthburner LED Section ##
                        #STATUS_READY                #
                        # End LED Section ############
                    {% endif %}
                    # toggle carriage
                    ACTIVATE_EXTRUDER EXTRUDER=extruder
                    SET_DUAL_CARRIAGE CARRIAGE=0
                    # Scrub the nozzle if enabled
                    {% if do_scrub == 1 %}
                        _NOZZLE_SCRUB
                    {% endif %}
                    {% if dcvars.autopark == 1 %}
                        RESTORE_GCODE_STATE NAME=toolhead_state MOVE={dcvars.immediate_move} MOVE_SPEED={dcvars.movespeed}
                    {% endif %}
                {% endif %}
                # restore z
                {% if (z_safe) is defined %}
                    G91
                    G1 Z-{z_safe}
                    G90
                {% endif %}
                # Set the offsets
                {% if tweaked_z_offset == 0 %}
                  #Z-Offset was cleared when T1 was active, this can cause errors and compound offset if done repeatedly
                  SET_GCODE_OFFSET X=0 Y=0 Z=0 MOVE=1
                {% else %}
                  SET_GCODE_OFFSET X=0 Y=0 Z={(tweaked_z_offset - dcvars.offset_z)|round(3)} MOVE=1
                {% endif %}
                # print fan speed
                _SET_PRINT_FANS_SPEED
                # Stealthburner LED Section ##
                #STATUS_PRINTING             #
                # End LED Section ############
            {% endif %}
        {% endif %}
    {% endif %}

#####################################################################
#   _SWAP_T0 macro
#   Change to T0 via quick swap
#   Ported from Helge Keck's Vcore IDEX macros
#####################################################################

[gcode_macro _SWAP_T0]
description: Perform toolhead swap for T0
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    # Get position of both tool heads
    {% set t0_curr_pos = printer.configfile.config.stepper_x.position_endstop|float + dcvars.park_distance %}
    {% set t1_curr_pos = printer.toolhead.position.x|float %}
    {% set t0_new_x = t1_curr_pos - dcvars.offset_x %}
    {% set t1_new_x = printer.configfile.config.dual_carriage.position_max|float - dcvars.park_distance %}
    {% set t0_distance = t0_new_x - t0_curr_pos %}
    {% set t1_distance = t1_new_x - t1_curr_pos %}
    # If T0 is moving further or the same as T1
    {% if t0_distance >= t1_distance %}
        # Set mode to copy
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
        # Perform the copy mode move
        G0 X{t0_curr_pos + (t1_distance)} F{dcvars.feedrate}
        # Remove T1 from copy mode
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
        # Stealthburner LED Section ##
        #STATUS_READY               #
        # End LED Section ############
        # Finish moving T0 into position
        SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
        G0 X{t0_new_x} F{dcvars.feedrate}
    # if T0 is moving less than T1
    {% elif t0_distance < t1_distance %}
        # Set mode to copy
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
        # Perform the copy mode move
        G0 X{t0_new_x} F{dcvars.feedrate}
        # Finish moving T1
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
        G0 X{t1_new_x} F{dcvars.feedrate}
        # Stealthburner LED Section ##
        #STATUS_READY               #
        # End LED Section ############
        # Set the active carriage to T0
        SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    {% endif %}
    ACTIVATE_EXTRUDER EXTRUDER=extruder

#####################################################################
#   T1 macro
#   In PRIMARY mode activates tool 1, parks tool 0 if enabled
#####################################################################

[gcode_macro T1]
description: Activate T1 in "FULL_CONTROL" or "AUTO-PARK"
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set tweaked_z_offset = printer.gcode_move.homing_origin.z|round(3)|float %}
    {% set do_scrub = dcvars.scrub|int %}
    #{% set current_speed = printer.gcode_move.speed_factor %}
    #RESPOND MSG="Pre-change speed: {current_speed*100}"
    {% if printer.dual_carriage is defined %}
        {% if printer.dual_carriage.carriage_1 == "INACTIVE" %}
            # If the printer isn't homed, just change over to the other tool head.
            # This makes loading filament and puging a little easier
            {% if "xyz" not in printer.toolhead.homed_axes %}
                ACTIVATE_EXTRUDER EXTRUDER=extruder1
                SET_DUAL_CARRIAGE CARRIAGE=1
            {% else %}
                # z-hop
                {% if dcvars.z_hop|float > 0.0 %}
                    {% set max_z = printer.toolhead.axis_maximum.z|float %}
                    {% set cur_z = printer.toolhead.position.z|float %}
                    {% set z_safe = dcvars.z_hop|float if cur_z < (max_z - dcvars.z_hop|float) else (max_z - cur_z) %}
                    G91
                    G1 Z{z_safe}
                    G90
                {% endif %}
                {% if dcvars.swap_toolheads == 1 %}
                    SAVE_GCODE_STATE NAME=swap_state
                    RESPOND TYPE=echo MSG="T1 Swap Change"
                    _SWAP_T1
                    RESTORE_GCODE_STATE NAME=swap_state
                {% else %}
                    RESPOND TYPE=echo MSG="Classic Change"
                    {% if dcvars.autopark == 1 %}
                        # park tool
                        SAVE_GCODE_STATE NAME=toolhead_state
                        _PARK_TOOL
                        # Stealthburner LED Section ##
                        #STATUS_READY               #
                        # End LED Section ############
                    {% endif %}
                    # toggle carriage
                    ACTIVATE_EXTRUDER EXTRUDER=extruder1
                    SET_DUAL_CARRIAGE CARRIAGE=1
                    # Scrub the nozzle if enabled
                    {% if do_scrub == 1 %}
                        _NOZZLE_SCRUB
                    {% endif %}
                    {% if dcvars.autopark == 1 %}
                        RESTORE_GCODE_STATE NAME=toolhead_state MOVE={dcvars.immediate_move} MOVE_SPEED={dcvars.movespeed}
                    {% endif %}
                {% endif %}
                # restore z
                {% if (z_safe) is defined %}
                    G91
                    G1 Z-{z_safe}
                    G90
                {% endif %}
                # offsets
                {% if ((tweaked_z_offset + dcvars.offset_z)|round(3)) == 0 %}
                    {% set tweaked_z_offset = tweaked_z_offset + 0.001 %} #never allow the tweaked offset and set offset to equal 0 causes compounding issues
                {% endif %}
                SET_GCODE_OFFSET X={dcvars.offset_x} Y={dcvars.offset_y} Z={(tweaked_z_offset+dcvars.offset_z)|round(3)} MOVE=1
                # print fan speed
                _SET_PRINT_FANS_SPEED
                # Stealthburner LED Section ##
                #STATUS_PRINTING            #
                # End LED Section ############
            {% endif %}
        {% endif %}
    {% endif %}

#####################################################################
#   _SWAP_T1 macro
#   Change to T1 via quick swap
#   Ported from Helge Keck's Vcore IDEX macros
#####################################################################

[gcode_macro _SWAP_T1]
description: Perform toolhead swap for T1
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    # Get position of both tool heads
    {% set t0_curr_pos = printer.toolhead.position.x|float %}
    {% set t1_curr_pos = printer.configfile.config.dual_carriage.position_max|float - dcvars.park_distance %}
    {% set t0_new_x = printer.configfile.config.stepper_x.position_endstop|float + dcvars.park_distance %}
    {% set t1_new_x = t0_curr_pos %}
    {% set t0_distance = (t0_curr_pos - t0_new_x) %}
    {% set t1_distance = (t1_curr_pos - t1_new_x) %}
    # If T0 is moving further or the same as T1
    {% if t0_distance >= t1_distance %}
        # Set mode to copy
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
        # Perform the copy mode move
        G0 X{t0_curr_pos - (t1_distance + dcvars.offset_x)} F{dcvars.feedrate}
        # Finish moving T0 into position
        SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
        G0 X{t0_new_x} F{dcvars.feedrate}
        # Stealthburner LED Section ##
        #STATUS_READY               #
        # End LED Section ############
        # Activate T1 carriage
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    # if T0 is moving less than T1
    {% elif t0_distance < t1_distance %}
        # Stealthburner LED Section ##
        #STATUS_READY               #
        # End LED Section ############
        # Set mode to copy
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
        # Perform the copy mode move
        G0 X{t0_new_x} F{dcvars.feedrate}
        # Activate T1 carriage
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
        # Finish moving T1 into position
        G0 X{t1_new_x} F{dcvars.feedrate}
    {% endif %}
    ACTIVATE_EXTRUDER EXTRUDER=extruder1

#####################################################################
#   _PARK_TOOL
#   Parks toolhead at the far end of the axis
#####################################################################

[gcode_macro _PARK_TOOL]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% if printer.dual_carriage is defined %}
        SAVE_GCODE_STATE NAME=park_tool
        SET_GCODE_OFFSET X=0 Y=0 Z=0
        G90
        {% if printer.toolhead.extruder == 'extruder' %}
            {% set XPOS = printer.configfile.config.stepper_x.position_endstop|float + dcvars.park_distance %}
            G1 X{XPOS} F{dcvars.feedrate}
        {% elif (printer.toolhead.extruder) == 'extruder1' %}
            {% set XPOS = printer.configfile.config.dual_carriage.position_max|float - dcvars.park_distance %}
            G1 X{XPOS} F{dcvars.feedrate}
        {% else %}
            RESPOND TYPE=error MSG={ "Unknown extruder: %s".format(printer.toolhead.extruder) }
        {% endif %}
        # Stealthburner LED Section ##
        #STATUS_READY                #
        # End LED Section ############
        RESTORE_GCODE_STATE NAME=park_tool
    {% endif %}

#####################################################################
#   _NOZZLE_SCRUB
#   Brushes nozzle across wipers to remove ooze.
#   by dorkscript in #tridex_dev
#####################################################################

[gcode_macro _NOZZLE_SCRUB]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% if printer.dual_carriage is defined and printer.toolhead.extruder in ['extruder', 'extruder1'] %}
        G90 ; Absolute Positioning
        {% set MIN = 1 %}
        {% set MAX = 20.0 %}
        {% set T0_MIN = printer.configfile.config.stepper_x.position_min|float + dcvars.park_distance %}
        {% set T1_MIN = printer.configfile.config.dual_carriage.position_max|float - dcvars.park_distance %}
        {% if printer.toolhead.extruder == 'extruder' %}
            {% set TEMP = printer.extruder.temperature %}
            {% set XMAX = T0_MIN %}
            {% set XPOS = T0_MIN + (MIN|float) %}
            {% set XPOS1 = T0_MIN + (MAX|float) %}
        {% else %}
            {% set TEMP = printer.extruder1.temperature %}
            {% set XMAX = T1_MIN %}
            {% set XPOS = T1_MIN - (MIN|float) %}
            {% set XPOS1 = T1_MIN - (MAX|float) %}
        {% endif %}

        # If extruder hot enough, purge
        {% if TEMP >= dcvars.purge_temp_min %}
            G90 ; Absolute Positioning
            G1 X{XMAX} F{dcvars.prep_spd_xy}
            M83      ; relative mode
            G1 E{dcvars.purge_length} F{dcvars.purge_spd}
            G1 E-{dcvars.purge_ret} F{dcvars.purge_spd * 5}

            G90 ; Absolute Positioning
            G1 X{XPOS} F{dcvars.prep_spd_xy}
            G4 P{dcvars.ooze_dwell * 1000} ; pause
            G92 E0   ; reset extruder
    
            G90 ; Absolute Positioning
            G1 X{XPOS1} F{dcvars.prep_spd_xy}
            {% for i in range(dcvars.scrubs) %}
                G1 X{XPOS} F{dcvars.feedrate}
                G1 X{XPOS1} F{dcvars.feedrate}
            {% endfor %}
            G1 X{XPOS} F{dcvars.prep_spd_xy}
        {% endif %}
        G90 ; Absolute Positioning
    {% endif %}

#####################################################################
#   M605 aka DUAL-CARRIAGES : MODES ACTIVATION
#   Activates the requested mode and moves tools to starting position
#####################################################################

[gcode_macro M605]
description: Set the dual-carriages mode from slicers
gcode:
    {% set mode = params.S|default(1)|int %}

    {% if (mode) == 0 %}
        SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=autopark VALUE=0
        SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY   # In case the last print was a copy / mirror
        SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
        SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY        
    {% elif (mode) == 1 %}
        # Primary with auto_park
        ACTIVATE_PRIMARY_MODE
    {% elif (mode) == 2 or (mode) == 5 %}
        # Copy
        ACTIVATE_COPY_MODE
    {% elif (mode) == 3 or (mode) == 6 %}
        # Mirror
        ACTIVATE_MIRROR_MODE
    {% endif %}

    {% if (mode) == 5 or (mode) == 6 %}
        RESPOND MSG="Please setup rafts in your slicer"
    {% endif %}

#####################################################################
#   DUAL-CARRIAGES : PRIMARY MODE ACTIVATION
#####################################################################

[gcode_macro ACTIVATE_PRIMARY_MODE]
description: Set the carriages for PRIMARY mode
gcode:
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=autopark VALUE=1
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY  # In case the last print was a copy / mirror
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    ACTIVATE_EXTRUDER EXTRUDER=extruder

#####################################################################
#   DUAL-CARRIAGES : COPY MODE ACTIVATION
#####################################################################

[gcode_macro ACTIVATE_COPY_MODE]
description: Set the carriages for COPY mode
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set T0_START = dcvars.copy_start_x|float %}
    {% set T1_START = (printer.configfile.config.stepper_x.position_min|float + printer.configfile.config.dual_carriage.position_max|float) / 2 + T0_START|float %}
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    G0 X{T0_START} Y{dcvars.copy_start_y} Z{dcvars.copy_start_z} F{dcvars.homing_feedrate}
    # Stealthburner LED Section ##
    #STATUS_PRINTING
    # End LED Section ############
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    G0 X{T1_START} F{dcvars.homing_feedrate}
    # Stealthburner LED Section ##
    #STATUS_PRINTING
    # End LED Section ############
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder

#####################################################################
#   DUAL-CARRIAGES : MIRROR MODE ACTIVATION
#####################################################################

[gcode_macro ACTIVATE_MIRROR_MODE]
description: Set the carriages for MIRROR mode
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set T0_START = dcvars.copy_start_x|float %}
    {% set T1_START = (printer.configfile.config.stepper_x.position_min|float + printer.configfile.config.dual_carriage.position_max|float) - T0_START|float %}
    SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
    G0 X{T0_START} Y{dcvars.copy_start_y} Z{dcvars.copy_start_z} F{dcvars.homing_feedrate}
    # Stealthburner LED Section ##
    #STATUS_PRINTING
    # End LED Section ############
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
    G0 X{T1_START} F{dcvars.homing_feedrate}
    # Stealthburner LED Section ##
    #STATUS_PRINTING
    # End LED Section ############
    SET_DUAL_CARRIAGE CARRIAGE=1 MODE=MIRROR
    SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder

#####################################################################
#   M106 / M107 aka DUAL-CARRIAGES : PRINT FANS MANAGEMENT
#   Sync's the print cooling fans between the tools
#####################################################################

[gcode_macro M106]
description: Override "M106" to account for multiple extruders.
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set raw_speed = params.S|default(0)|float %}
    {% set fan_speed = (raw_speed / 255.0)|round(2) %}
    {% if (params.P) is defined %}
        {% set P_fan = dcvars.fan0 if (params.P)|int == 0 else dcvars.fan1 %}
        SET_FAN_SPEED FAN={P_fan} SPEED={fan_speed}
    {% elif printer.dual_carriage is defined %}
        _SET_PRINT_FANS_SPEED SPEED={fan_speed}
    {% endif %}
    
[gcode_macro M107]
description: Override "M107" to account for multiple extruders.
gcode:
    M106 S0
    
[gcode_macro _SET_PRINT_FANS_SPEED]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% if params.SPEED is defined %}
        {% set fan_speed = params.SPEED|float %}
    {% else %}
        # read print fan speed from active extruder
        {% set fan0_speed = printer["fan_generic " + dcvars.fan0].speed|float %}
        {% set fan1_speed = printer["fan_generic " + dcvars.fan1].speed|float %}
        {% set fan_speed = [fan0_speed, fan1_speed]|max %}
    {% endif %}

    SET_FAN_SPEED FAN={dcvars.fan0} SPEED={fan_speed}
    SET_FAN_SPEED FAN={dcvars.fan1} SPEED={fan_speed}

#####################################################################
#   M104 / M109 PRINT TEMPERATURE MANAGEMENT
#   Sync's the printing temperature between the tools
#   and allows for different filament usage on copy / mirror prints
#####################################################################

[gcode_macro M104]
rename_existing: M104.1
description: Override "M104" to sync extruders during COPY and MIRROR modes.
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set set_temp = params.S|int %}
    {% set set_tool = params.T|default(0)|int %}

    # Setup the behavior of setting the extruder temps while in copy / mirror mode
    {% if (printer.dual_carriage.carriage_1 == 'MIRROR') or (printer.dual_carriage.carriage_1 == 'COPY') %}
        {% if (set_tool == 1) %}
            # If T1 is sent, set the temp and exit this macro
            M104.1 S{set_temp} T{set_tool}
        {% else %}
            # No tool specified, or T0
            # Check to see if the set_temp equals to the stored print temp
            {% if (set_temp == dcvars.t0_copy_mirror_temp_print|int) %}
                # We are requesting the set temp that the slicer sent for T0 printing
                # Set the temp for T0
                M104.1 S{dcvars.t0_copy_mirror_temp_print} T0
                # Set T1 to the temp the slicer sent over
                M104.1 S{dcvars.t1_copy_mirror_temp_print} T1
            {% else %}
                # We are adjusting T0 temp
                M104.1 S{set_temp} T0
                # Update the stored temp because the user overrode the one sent by the slicer
                {% if (set_temp != dcvars.t0_copy_mirror_temp_start) %}
                    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=t0_copy_mirror_temp_print VALUE={set_temp}
                {% endif %}
            {% endif %}
        {% endif %}
    {% else %}
        M104.1 S{set_temp} T{set_tool}
    {% endif %}

#####################################################################
#   M104 / M109 PRINT TEMPERATURE MANAGEMENT
#   Sync's the printing temperature between the tools
#   and allows for different filament usage on copy / mirror prints
#####################################################################

[gcode_macro M109]
rename_existing: M109.1
description: Override "M109" to sync extruders during COPY and MIRROR modes.
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set set_temp = params.S|float %}
    {% set set_tool = params.T|default(0)|int %}

    # Setup the behavior of setting the extruder temps while in copy / mirror mode
    {% if (printer.dual_carriage.carriage_1 == 'MIRROR') or (printer.dual_carriage.carriage_1 == 'COPY') %}
        {% if (set_tool == 1) %}
            # If T1 is sent, set the temp and exit this macro
            M109.1 S{set_temp} T{set_tool}
        {% else %}
            # No tool specified, or T0
            # Check to see if the set_temp equals to the stored print temp
            {% if (set_temp == dcvars.t0_copy_mirror_temp_print|int) %}
                # We are requesting the set temp that the slicer sent for T0 printing
                # Set the temp for T0
                M109.1 S{dcvars.t0_copy_mirror_temp_print} T0
                # Set T1 to the temp the slicer sent over
                M109.1 S{dcvars.t1_copy_mirror_temp_print} T1
            {% else %}
                # We are adjusting T0 temp
                M109.1 S{set_temp} T0
                # Update the stored temp because the user overrode the one sent by the slicer
                {% if (set_temp != dcvars.t0_copy_mirror_temp_start) %}
                    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=t0_copy_mirror_temp_print VALUE={set_temp}
                {% endif %}
            {% endif %}
        {% endif %}
    {% else %}
        M109.1 S{set_temp} T{set_tool}
    {% endif %}

#####################################################################
#   Writes current offsets to the console
#####################################################################

[gcode_macro display_current_offsets]
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    RESPOND MSG="T1 Z offset is at {dcvars.offset_z}"
    RESPOND MSG="T1 Y offset is at {dcvars.offset_y}"
    RESPOND MSG="T1 X offset is at {dcvars.offset_x}"

#####################################################################
#   Saves the current gcode offsets to the disk to keep them
#   consistent across restarts.
#####################################################################

[gcode_macro save_offsets_to_disk]
description: Saves the current T1 offsets to the disk for restarts
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    SAVE_VARIABLE VARIABLE=t1_offset_x VALUE={dcvars.offset_x|round(3)|float}
    SAVE_VARIABLE VARIABLE=t1_offset_y VALUE={dcvars.offset_y|round(3)|float}
    SAVE_VARIABLE VARIABLE=t1_offset_z VALUE={dcvars.offset_z|round(3)|float}

#####################################################################
#   Automatically loads the current gcode offsets from disk
#   at printer startup to keep them consistent across restarts.
#####################################################################

[delayed_gcode _load_offsets_from_disk]
initial_duration: 3.0
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set load_x_offset = svv.t1_offset_x|float %}
    {% set load_y_offset = svv.t1_offset_y|float %}
    {% set load_z_offset = svv.t1_offset_z|float %}
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_x VALUE={load_x_offset}
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_y VALUE={load_y_offset}
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_z VALUE={load_z_offset}

    {% set tool_change = svv.preferred_tool_change %}
    {% if tool_change == "SWAP" %}
      SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=swap_toolheads VALUE=1
      SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=immediate_move VALUE=1
    {% elif tool_change == "OOZE_PREV" %}
      SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=swap_toolheads VALUE=0
      SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=immediate_move VALUE=0
    {% else %}
      SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=swap_toolheads VALUE=0
      SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=immediate_move VALUE=1
    {% endif %}
    
    UPDATE_DELAYED_GCODE ID=_load_offsets_from_disk DURATION=0

#####################################################################
#   Modify T1 X offset values.
#   The following macros allow tweaking the X offset by 0.1 and
#   0.05 increments. 
#####################################################################

[gcode_macro X_offset_increase01]
description: Increase the gcode offset for X by 0.1mm for T1
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set new_val = dcvars.offset_x + 0.10|round(3) %}
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_x VALUE={new_val}
    RESPOND MSG="New X offset value: {new_val|round(3)}"
    {% if printer.dual_carriage.carriage_0 == "INACTIVE" %}
        SET_GCODE_OFFSET X_ADJUST=0.10 MOVE=1
    {% endif %}
    SAVE_OFFSETS_TO_DISK

[gcode_macro X_offset_increase005]
description: Increase the gcode offset for X by 0.05mm for T1
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set new_val = dcvars.offset_x + 0.05|round(3) %}
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_x VALUE={new_val}
    RESPOND MSG="New X offset value: {new_val|round(3)}"
    {% if printer.dual_carriage.carriage_0 == "INACTIVE" %}
        SET_GCODE_OFFSET X_ADJUST=0.05 MOVE=1
    {% endif %}
    SAVE_OFFSETS_TO_DISK

[gcode_macro X_offset_decrease01]
description: Decrease the gcode offset for X by 0.1mm for T1
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set new_val = dcvars.offset_x - 0.10|round(3) %}
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_x VALUE={new_val}
    RESPOND MSG="New X offset value: {new_val|round(3)}"
    {% if printer.dual_carriage.carriage_0 == "INACTIVE" %}
        SET_GCODE_OFFSET X_ADJUST=-0.10 MOVE=1
    {% endif %}
    SAVE_OFFSETS_TO_DISK

[gcode_macro X_offset_decrease005]
description: Decrease the gcode offset for X by 0.05mm for T1
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set new_val = dcvars.offset_x - 0.05|round(3) %}
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_x VALUE={new_val}
    RESPOND MSG="New X offset value: {new_val|round(3)}"
    {% if printer.dual_carriage.carriage_0 == "INACTIVE" %}
        SET_GCODE_OFFSET X_ADJUST=-0.05 MOVE=1
    {% endif %}
    SAVE_OFFSETS_TO_DISK

#####################################################################
#   Modify T1 Y offset values.
#   The following macros allow tweaking the Y offset by 0.1 and
#   0.05 increments. 
#####################################################################

[gcode_macro Y_offset_increase01]
description: Increase the gcode offset for Y by 0.1mm for T1
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set new_val = dcvars.offset_y + 0.1|round(3) %}
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_y VALUE={new_val}
    RESPOND MSG="New Y offset value: {new_val|round(3)}"
    {% if printer.dual_carriage.carriage_0 == "INACTIVE" %}
        SET_GCODE_OFFSET Y_ADJUST=0.10 MOVE=1
    {% endif %}
    SAVE_OFFSETS_TO_DISK

[gcode_macro Y_offset_increase005]
description: Increase the gcode offset for Y by 0.05mm for T1
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set new_val = dcvars.offset_y + 0.05|round(3) %}
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_y VALUE={new_val}
    RESPOND MSG="New Y offset value: {new_val|round(3)}"
    {% if printer.dual_carriage.carriage_0 == "INACTIVE" %}
        SET_GCODE_OFFSET Y_ADJUST=0.05 MOVE=1
    {% endif %}
    SAVE_OFFSETS_TO_DISK

[gcode_macro Y_offset_decrease01]
description: Decrease the gcode offset for Y by 0.1mm for T1
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set new_val = dcvars.offset_y - 0.1|round(3) %}
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_y VALUE={new_val}
    RESPOND MSG="New Y offset value: {new_val|round(3)}"
    {% if printer.dual_carriage.carriage_0 == "INACTIVE" %}
        SET_GCODE_OFFSET Y_ADJUST=-0.10 MOVE=1
    {% endif %}
    SAVE_OFFSETS_TO_DISK

[gcode_macro Y_offset_decrease005]
description: Decrease the gcode offset for Y by 0.05mm for T1
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set new_val = dcvars.offset_y - 0.05|round(3) %}
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_y VALUE={new_val}
    RESPOND MSG="New Y offset value: {new_val|round(3)}"
    {% if printer.dual_carriage.carriage_0 == "INACTIVE" %}
        SET_GCODE_OFFSET Y_ADJUST=-0.05 MOVE=1
    {% endif %}
    SAVE_OFFSETS_TO_DISK

#####################################################################
#   Modify T1 Z offset values.
#   The following macros allow tweaking the Z offset by 0.05 and
#   .01 increments. 
#####################################################################

[gcode_macro Z_offset_increase005]
description: Increase the gcode offset for Z by 0.05mm for T1
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set new_val = dcvars.offset_z + 0.05|round(3) %}
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_z VALUE={new_val}
    RESPOND MSG="New Z offset value: {new_val|round(3)}"
    {% if printer.dual_carriage.carriage_0 == "INACTIVE" %}
        SET_GCODE_OFFSET Z_ADJUST=0.05 MOVE=1
    {% endif %}
    SAVE_OFFSETS_TO_DISK

[gcode_macro Z_offset_increase001]
description: Increase the gcode offset for Z by 0.01mm for T1
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set new_val = dcvars.offset_z + 0.01|round(3) %}
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_z VALUE={new_val}
    RESPOND MSG="New Z offset value: {new_val|round(3)}"
    {% if printer.dual_carriage.carriage_0 == "INACTIVE" %}
        SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1
    {% endif %}
    SAVE_OFFSETS_TO_DISK

[gcode_macro Z_offset_decrease001]
description: Decrease the gcode offset for Z by 0.01mm for T1
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set new_val = dcvars.offset_z - 0.01|round(3) %}
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_z VALUE={new_val}
    RESPOND MSG="New Z offset value: {new_val|round(3)}"
    {% if printer.dual_carriage.carriage_0 == "INACTIVE" %}
        SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1
    {% endif %}
    SAVE_OFFSETS_TO_DISK

[gcode_macro Z_offset_decrease005]
description: Decrease the gcode offset for Z by 0.05mm for T1
gcode:
    {% set dcvars = printer["gcode_macro DC_VARS"] %}
    {% set new_val = dcvars.offset_z - 0.05|round(3) %}
    SET_GCODE_VARIABLE MACRO=DC_VARS VARIABLE=offset_z VALUE={new_val}
    RESPOND MSG="New Z offset value: {new_val|round(3)}"
    {% if printer.dual_carriage.carriage_0 == "INACTIVE" %}
        SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1
    {% endif %}
    SAVE_OFFSETS_TO_DISK